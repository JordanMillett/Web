@inject HttpClient Http
@inject SettingService Settings
@inject ITextToSpeechService TextToSpeech

@if (Ready)
{
    <h3><b>Match the pairs</b></h3>
    <br>
    <br>
    <br>
    
    <div id="choices-container">
        <div id="choices" class="left">
            @for (int i = 0; i < Indices.Count; i++)
            {
                int ID = i;
                <div class="word @GetState(ID)" @onclick="() => Check(ID)">
                    <p>@EN_Array[Indices[i]].ToString()</p>
                </div>
            }
        </div>
        <div id="choices" class="right">
            @for (int i = 0; i < Indices.Count; i++)
            {
                int ID = i + 5;
                <div class="word @GetState(ID)" @onclick="() => Check(ID)">
                    <p>@RU_Array[Shuffle[i]].ToString()</p>
                </div>
            }
        </div>
    </div>   
}

@code
{
    [Parameter]
    public bool Ready { get; set; }
    [Parameter]
    public EventCallback<bool> ReadyStateChanged { get; set; }

    string EN_vocab = "";
    string RU_vocab = "";

    string[] EN_Array = new string[0];
    string[] RU_Array = new string[0];

    public List<int> Indices = new List<int>();

    int Selected = -1;

    public enum State
    {
        None,
        Selected,
        Correct,
        Wrong,
        Invisible
    }

    public State[] States = new State[10];
    public List<int> Shuffle = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        EN_vocab = await Http.GetStringAsync("data/vocab/en_" + Settings.Vocab + ".txt");
        RU_vocab = await Http.GetStringAsync("data/vocab/ru_" + Settings.Vocab + ".txt");

        EN_Array = EN_vocab.Split(new string[] {"\n"}, StringSplitOptions.None);
        RU_Array = RU_vocab.Split(new string[] {"\n"}, StringSplitOptions.None);

        Init();

        await ReadyStateChanged.InvokeAsync(true);

    }

    void Init()
    {        
        Random Rand = new Random();
        Indices.Clear();
        Shuffle.Clear();
        States = new State[10]; 

        for(int i = 0; i < 5; i++)
        {
            int Index = Rand.Next(0, EN_Array.Length);
            if (!Indices.Contains(Index))
                Indices.Add(Index);
            else
                i--;
        }

        List<int> OrderedIndices = new List<int>(Indices);
        for(int i = 0; i < 5; i++)
        {
            int selected = Rand.Next(0, OrderedIndices.Count);
            Shuffle.Add(OrderedIndices[selected]);
            OrderedIndices.RemoveAt(selected);
        }
    }

    string GetState(int Index)
    {
        //Console.WriteLine("Get State at : " + Index);

        switch (States[Index])
        {
            case State.Correct:  return "word-correct";
            case State.Wrong:  return "word-wrong";
            case State.Selected:  return "word-selected";
            case State.Invisible:  return "hidden";
            default:  return "";
        }
    }

    public async Task Check(int Chosen)
    {
        if (States[Chosen] == State.Correct || States[Chosen] == State.Wrong || States[Chosen] == State.Invisible)
            return;
            
        if(Chosen <= 4)
            _ = TextToSpeech.Speak(EN_Array[Indices[Chosen]].ToString(), true);
        else
            _ = TextToSpeech.Speak(RU_Array[Shuffle[Chosen - 5]].ToString(), false);

        //Console.WriteLine("Chosen: " + Chosen);

        if(Selected == -1) //if nothing selected
        {
            Selected = Chosen;
            States[Selected] = State.Selected;
        }else            //if something selected
        {
            if (Selected == Chosen)   //if selected object is selected again
            {
                States[Selected] = State.None;
                Selected = -1;
            }
            else          //new second selection
            {
                if ((Selected <= 4 && Chosen <= 4) || (Selected > 4 && Chosen > 4)) //if selection is on same side
                {
                    States[Selected] = State.None;
                    Selected = Chosen;
                    States[Selected] = State.Selected;
                }
                else //if new selection is not on same side then check answer
                {
                    bool Correct = false;

                    //Console.WriteLine("Index One: " + Selected);
                    //Console.WriteLine("Index Two: " + Chosen);

                    if(Selected < 5)
                    {
                        if (Indices[Selected] == Shuffle[Chosen - 5])
                            Correct = true;
                    }else
                    {
                        if (Shuffle[Selected - 5] == Indices[Chosen])
                            Correct = true;
                    }

                    //int First = Selected >= 5 ? Selected - 5 : Selected;
                    //int Second = Chosen >= 5 ? Chosen - 5 : Chosen;

                    //Console.WriteLine("First: " + First);
                    //Console.WriteLine("Second: " + Second);

                    int IndexOne = Selected;
                    int IndexTwo = Chosen;

                    //Console.WriteLine(Indices[First]);
                    //Console.WriteLine(Shuffle[Second]);

                    if (Correct) //correct
                    {

                        States[IndexOne] = State.Correct;
                        States[IndexTwo] = State.Correct;
                        Selected = -1;

                        await Task.Delay(500);

                        States[IndexOne] = State.Invisible;
                        States[IndexTwo] = State.Invisible;

                        int Done = 0;
                        foreach (State S in States)
                        {
                            if (S == State.Invisible)
                                Done++;
                        }

                        if (Done == 10)
                            Init();


                    }else
                    {
                        States[Selected] = State.Wrong;
                        States[Chosen] = State.Wrong;
                        Selected = -1;

                        await Task.Delay(500);

                        States[IndexOne] = State.None;
                        States[IndexTwo] = State.None;
                    }

                    return;
                }
            }

        }
        
        
        
        /*
        if (Wrong != -1)
            return;

        if(Chosen == Answer)
        {
            await ReadyStateChanged.InvokeAsync(false);

            Init();

            await ReadyStateChanged.InvokeAsync(true);
        }else
        {
            Wrong = Chosen;
            await Task.Delay(1000);
            Wrong = -1;
        }*/
    }
}