@inject HttpClient Http
@inject ITextToSpeechService TextToSpeech

@if (Ready)
{
    <h3><b>Which number is this?</b></h3>
    <br>
    <div id="phrase"><h5>@Number</h5></div>
    <hr>
    
    <br>
    <br>
    
    <div id="choices">
        @foreach (int choice in Choices)
        {
            <div class="word  @(Wrong == choice ? "word-wrong" : "") @(Right == choice ? "word-correct" : "")" @onclick="() => Check(choice)">
                <p>@choice.ToString()</p>
            </div>
        }
    </div>   
}

@code
{
    [Parameter]
    public bool Ready { get; set; }
    [Parameter]
    public EventCallback<bool> ReadyStateChanged { get; set; }

    public string Number = "";
    public int Answer = 0;

    string RU_numbers = "";

    string[] EN_Array = new string[0];
    string[] RU_Array = new string[0];

    public List<int> Choices = new List<int>();

    public int Wrong = -1;
    public int Right = -1;

    protected override async Task OnInitializedAsync()
    {
        RU_numbers = await Http.GetStringAsync("data/numbers/ru.txt");

        RU_Array = RU_numbers.Split(new string[] {"\n"}, StringSplitOptions.None);

        Init();

        await ReadyStateChanged.InvokeAsync(true);

    }

    void Init()
    {
        Random Rand = new Random();
        Choices.Clear();

        Answer = Rand.Next(0, RU_Array.Length);
        Number = RU_Array[Answer];
        Answer++;

        Number = char.ToUpper(Number[0]) + Number.Substring(1);
        _ = TextToSpeech.Speak(Number, false);

        Choices.Add(Answer);

        for(int i = 0; i < 20; i++)
        {
            int Filler = Rand.Next(0, RU_Array.Length);
            if (!Choices.Contains(Filler))
                Choices.Add(Filler);
            else
                i--;
        }

        Choices.Sort();
    }

    public async Task Check(int Chosen)
    {
        if (Wrong != -1)
            return;

        if (Right != -1)
            return;

        if(Chosen == Answer)
        {
            Right = Chosen;
            await Task.Delay(500);
            Right = -1;

            await ReadyStateChanged.InvokeAsync(false);

            Init();

            await ReadyStateChanged.InvokeAsync(true);
        }else
        {
            Wrong = Chosen;
            await Task.Delay(500);
            Wrong = -1;
        }
    }
}