@inject HttpClient Http

@if (Ready)
{
    <h3><b>Translate this sentence</b></h3>
    <br>
    <div id="phrase"><h5>@Sentence</h5></div>
    <hr>

    <div id="top-words">
        @if(Chosen.Count > 0)
        {
            @foreach (int index in Chosen)
            {
                <div class="word" @onclick="() => Toggle(index)">
                    <p>@Words[index]</p>
                </div>
            }
        }else
        {
            <div class="word hidden"><p>Hidden</p></div>
        }
    </div>
    <hr><br>
    <br>

    <div id="bottom-words">
        @foreach (int index in Indices)
        {
            <div class="word @(Chosen.Contains(index) ? "word-blank" : "")" @onclick="() => Toggle(index)">
                <p>@Words[index]</p>
            </div>
        }
    </div>

    <div id="bottom-container">
        <button class="button-fill @(Wrong ? "button-fill-wrong" : "")" @onclick="Check"><h6><b>CHECK</b></h6></button>
    </div>
}
        
@code
{
    [Parameter]
    public bool Ready { get; set; }
    [Parameter]
    public EventCallback<bool> ReadyStateChanged { get; set; }

    public string Sentence = "";
    public string Translation = "";

    public List<string> Words = new List<string>();
    public List<int> Indices = new List<int>();

    public List<int> Chosen = new List<int>();
    public List<string> Mixed = new List<string>();

    public bool Wrong = false;

    string EN_sentences = "";
    string RU_sentences = "";
    string EN_common = "";
    string RU_common = "";

    string[] EN_Array = new string[0];
    string[] RU_Array = new string[0];

    string[] EN_Randoms = new string[0];
    string[] RU_Randoms = new string[0];

    protected override async Task OnInitializedAsync()
    {
        EN_sentences = await Http.GetStringAsync("data/en_sentences.txt");
        RU_sentences = await Http.GetStringAsync("data/ru_sentences.txt");
        EN_common = await Http.GetStringAsync("data/en_common.txt");
        RU_common = await Http.GetStringAsync("data/ru_common.txt");

        EN_Array = EN_sentences.Split(new string[] {"\n"}, StringSplitOptions.None);
        RU_Array = RU_sentences.Split(new string[] {"\n"}, StringSplitOptions.None);

        EN_Randoms = EN_common.Split(new string[] {"\n"}, StringSplitOptions.None);
        RU_Randoms = RU_common.Split(new string[] {"\n"}, StringSplitOptions.None);

        Init();

        await ReadyStateChanged.InvokeAsync(true);

    }

    void Init()
    {
        Random Rand = new Random();

        int Index = Rand.Next(0, EN_Array.Length);
        bool Flipped = Rand.Next(2) == 1;

        if (Flipped)
        {
            Sentence = StripString(EN_Array[Index]);
            Translation = StripString(RU_Array[Index]);
        }else
        {
            Sentence = StripString(RU_Array[Index]);
            Translation = StripString(EN_Array[Index]);
        }

        Words = Translation.Split(' ').ToList();

        int Extra = 0;
        switch(Words.Count) 
        {
            case 1:  Extra = Rand.Next(2, 4);  break; //2 - 3
            case 2:  Extra = Rand.Next(1, 3);  break; //1 - 2
            case 3:  Extra = Rand.Next(1, 4);  break; //1 - 3
            case 4:  Extra = Rand.Next(1, 4);  break; //1 - 3
            case 5:  Extra = Rand.Next(1, 3);  break; //1 - 2
            case 6:  Extra = Rand.Next(1, 3);  break; //1 - 2
            case 7:  Extra = Rand.Next(1, 3);  break; //1 - 2
            default: Extra = Rand.Next(0, 2);  break; //0 - 1
        }

        for (int i = 0; i < Extra; i++)
            if(Flipped)
                Words.Add(RU_Randoms[Rand.Next(0, RU_Randoms.Length)]);
            else
                Words.Add(EN_Randoms[Rand.Next(0, EN_Randoms.Length)]);

        List<int> OrderedIndices = new List<int>();
        OrderedIndices.Clear();
        Indices.Clear();
        Chosen.Clear();

        for (int i = 0; i < Words.Count; i++)
            OrderedIndices.Add(i);

        for (int i = 0; i < Words.Count; i++)
        {
            int selected = Rand.Next(0, OrderedIndices.Count);
            Indices.Add(OrderedIndices[selected]);
            OrderedIndices.RemoveAt(selected);
        }
    }

    public string StripString(string Input)
    {
        Regex _punctuation = new Regex("[,.!?]+");
        Regex _apostrophe = new Regex("[â€™]+");
        Regex _uppercaseAloneI = new Regex("(\\si\\s)+");

        //Console.WriteLine(Input);

        string Output = _punctuation.Replace(Input, "");

        Output = _apostrophe.Replace(Output, "'");

        Output = Output.Trim();

        Output = Output.ToLower();

        Output = char.ToUpper(Output[0]) + Output.Substring(1);

        Output = _uppercaseAloneI.Replace(Output, " I ");

        //Console.WriteLine(Output);
        //Console.WriteLine("");
        return Output;
    }

    public async Task Check()
    {
        if (Wrong)
            return;

        string Answer = "";

        foreach (int C in Chosen)
        {
            Answer += Words[C] + " ";
        }

        Answer = Answer.Remove(Answer.Length - 1, 1);

        if(Answer != Translation)
        {
            Wrong = true;
        }

        if (!Wrong)
        {
            await ReadyStateChanged.InvokeAsync(false);
   
            Init();
       
            await ReadyStateChanged.InvokeAsync(true);
        }else
        {
            await Task.Delay(500);
            Wrong = false;
        }
    }

    void Toggle(int Index)
    {
        if(Chosen.Contains(Index))
        {
            Chosen.Remove(Index);
        }else
        {
            Chosen.Add(Index);
        }
    }
}